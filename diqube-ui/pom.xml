<!--

    diqube: Distributed Query Base.

    Copyright (C) 2015 Bastian Gloeckle

    This file is part of diqube.

    diqube is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                        http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.diqube</groupId>
    <artifactId>diqube</artifactId>
    <version>1-SNAPSHOT</version>
  </parent>
  <artifactId>diqube-ui</artifactId>
  <packaging>war</packaging>
  <name>diqube - UI</name>
  <url>http://www.diqube.org</url>
  
  <properties>
    <!-- This needs to be matching the values in karma.default.conf.js! -->
    <war.webapp.directory>${project.build.directory}/war</war.webapp.directory>
    <karma.final.config.dir>${project.build.directory}/karma-config</karma.final.config.dir>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>update-license-headers</id>
            <configuration>
              <skip>true</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- ensure compiler plugin is executed first in compile phase! -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <!-- Prepare karma config: We need to filter the karma config files from src/test/karma-config to contain 
                 the correct information before we can execute karma: 
                 
                 Not only do we need to give the config the correct directory locations, but also 
                 we need to give it a list of .js files that the tests need to load. These need to be in the right 
                 ordering to actually work. In order to test the index.html at the same time, we read the list of js
                 files to load from the index.html by extracting the name of the JS files from the <script src=..> tags!
                 -->
            <id>prepare-karma-config</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <!-- Load list of JS files loaded in index.html -->
                <loadfile property="jsFiles" srcFile="src/main/web/web/index.html">
                  <filterchain>
                    <linecontains>
                      <!-- select lines which contain script references -->
                      <contains value="script src=" />
                    </linecontains>
                    <tokenfilter>
                      <replaceregex pattern=".*script src=&quot;([^&quot;]+)&quot;.*" replace="webappBasePath + '\1'," />
                    </tokenfilter>
                  </filterchain>
                </loadfile>
                
                <echo message="Found following .js files to be included in index.html, will load them in the karma tests, too." />
                <echo message="${jsFiles}" />
              
                <!-- Copy the config files, replacing the placeholders. -->
                <!-- be sure we re-create those files each time, as JS files might have changed. -->
                <delete dir="${karma.final.config.dir}" /> 
                <mkdir dir="${karma.final.config.dir}" />
                <copy todir="${karma.final.config.dir}">
                  <fileset dir="src/test/karma-config/">
                    <include name="**/*" />
                  </fileset>
                  <filterset begintoken="{{" endtoken="}}">
                    <filter token="warBasePath" value="'${war.webapp.directory}'" />
                    <filter token="karmaBasePath" value="'${basedir}'"/>
                    <filter token="originalJsFiles" value="${jsFiles}" />
                  </filterset>
                </copy>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.diqube.build.maven</groupId>
        <artifactId>diqube-build-java-dts-maven-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <id>java-to-ts</id>
            <goals>
              <goal>ts</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <rootPackages>
                <rootPackage>org.diqube.ui</rootPackage>
              </rootPackages>
              <!-- Put into src/main/web folder for eclipse plugin to pick it up correctly. Same as the copying of angular2/ and rxjs/ below. -->
              <resultFile>${basedir}/src/main/web/web/diqube/remote/remote.ts</resultFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>install-node-and-npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <nodeVersion>v4.2.4</nodeVersion>
              <npmVersion>3.5.3</npmVersion>
            </configuration>
          </execution>
          <execution>
            <id>npm install</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>bower-install</id>
            <goals>
              <goal>bower</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>grunt</id>
            <goals>
              <goal>grunt</goal>
            </goals>
            <!-- run in compile, after diqube-java-dts-maven-plugin since this one compiles TypeScript and relies on the
                 output of diqube-java-dts-maven-plugin. -->
            <phase>compile</phase>
            <configuration>
              <srcdir>${basedir}</srcdir>
              <outputdir>${project.build.directory}</outputdir>
            </configuration>
          </execution>
          <execution>
            <id>javascript-tests</id>
            <goals>
              <goal>karma</goal>
            </goals>
            <!-- run karma in integration test phase, because we want to use the JS files that are actually packaged in 
                 the .war -> Let the war be built in package phase first and then use that data to feed into karma! -->
            <phase>integration-test</phase>
            <configuration>
              <karmaConfPath>${karma.final.config.dir}/karma.phantomjs.conf.js</karmaConfPath>
              <skip>true</skip> <!-- TODO #97 -->
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <!-- Overwritten in minjs profile below! -->
          <execution>
            <id>prepare-js-dependency-files</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>src/main/assembly/dev-dependencies-assembly.xml</descriptor>
              </descriptors>
              <finalName>dependencies-source</finalName>
              <attach>false</attach>
              <appendAssemblyId>false</appendAssemblyId>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <executions>
          <!-- Clean the eclipse-helper-dts files again, see above! -->
          <execution>
            <id>clean-eclipse-additional-dts</id>
            <goals>
              <goal>clean</goal>
            </goals>
            <phase>clean</phase>
            <configuration>
              <filesets>
                <fileset>
                  <!-- may have been put there by the "eclipse" profile -->
                  <directory>src/main/web/angular2</directory>
                </fileset>
                <fileset>
                  <!-- may have been put there by the "eclipse" profile -->
                  <directory>src/main/web/rxjs</directory>
                </fileset>
                <fileset>
                  <directory>src/main/web/web/diqube/remote</directory>
                  <includes>
                    <include>remote.ts</include>
                  </includes>
                </fileset>
              </filesets>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <webResources>
            <resource>
              <directory>src/main/web</directory>
              <targetPath>WEB-INF/classes</targetPath>
              <excludes>
                <!-- exclude ts files, as they should've been compiled to js and are included below. -->
                <exclude>**/*.ts</exclude>
              </excludes>
            </resource>
            <resource>
              <directory>${project.build.directory}/typescript-dev/main/web</directory>
              <targetPath>WEB-INF/classes</targetPath>
            </resource>
            <resource>
              <directory>${project.build.directory}/dependencies-source</directory>
              <targetPath>WEB-INF/classes</targetPath>
            </resource>
          </webResources>
          <webappDirectory>${war.webapp.directory}</webappDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-test-resources</id>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>src/test/web</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-remote-query</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-context</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-buildinfo</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-diql</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-ticket</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.diqube.build.maven</groupId>
      <artifactId>diqube-build-java-dts-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-test-util</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-plan</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    
    <dependency>
      <groupId>net.bytebuddy</groupId>
      <artifactId>byte-buddy-dep</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.el</groupId>
      <artifactId>javax.el-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.web</groupId>
      <artifactId>javax.el</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
    </dependency>


    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.websocket</groupId>
      <artifactId>javax.websocket-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>javascript-tests-chrome</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <executions>
              <execution>
                  <id>javascript-tests</id>
                  <configuration>
                    <karmaConfPath>${karma.final.config.dir}/karma.chrome.conf.js</karmaConfPath>
                  </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>minjs</id>
      <!-- This profile prepares a directory that contains all minified JS/CSS and makes war-plugin include those files 
           instead of the defaults. -->
       <activation>
        <activeByDefault>true</activeByDefault>
       </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <executions>
              <execution>
                <id>prepare-js-dependency-files</id>
                <configuration>
                  <descriptors>
                    <descriptor>src/main/assembly/minjs-dependencies-assembly.xml</descriptor>
                  </descriptors>
                  <finalName>dependencies-source</finalName>
                  <attach>false</attach>
                  <appendAssemblyId>false</appendAssemblyId>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <configuration>
              <webResources>
                <resource>
                  <directory>src/main/web</directory>
                  <targetPath>WEB-INF/classes</targetPath>
                  <excludes>
                    <!-- exclude ts files, as they should've been compiled to js and are included below. -->
                    <exclude>**/*.ts</exclude>
                  </excludes>
                </resource>
                <resource>
                  <directory>${project.build.directory}/typescript-ugly/main/web</directory>
                  <targetPath>WEB-INF/classes</targetPath>
                </resource>
                <resource>
                  <directory>${project.build.directory}/dependencies-source</directory>
                  <targetPath>WEB-INF/classes</targetPath>
                </resource>
              </webResources>
              <webappDirectory>${war.webapp.directory}</webappDirectory>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    
    <profile>
      <!-- Profile which should be activated while developing with Eclipse. Eclipse Mars.1 has a few issues:
        * Typescript cannot resolve node_modules as imports 
          * -> we copy angular/ and rxjs/ into the source folder.
        * When adjusting a .ts file, it gets re-built (palantir plugin), but m2e-wtp does not pick it up to publish to 
          running Tomcat
          * Ensure that after typescript has been built, to publish the results to target/test-classes and the m2e-wtp 
            target directory, as wtp is monitoring that folders for changes (because we add the source folders as 
            test-sources using the build-helper)
          * This may be based on that the frontend maven plugin does not mark the output as "dirty" and therefore
            eclipse does not pick it up, but frontend-maven plugin does not provide the possibility to mark a whole
            subdirectory tree as dirty.  
        * Eclipse source folders need to have the same structure as the output (= If all result files of a eclipse
          source folder should be available unter web/ in the resulting artifact, the sources themselves need to be in
          a web/ directory - solutions using a nice "targetPath" in maven for this (which would prefix the "web"
          automatically - do not work.
          * We have the sources organized in the right way (src/main/web contains another subfolder called "web").   
       -->
      <id>eclipse</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
                <!-- We're using palantirs typescript eclipse plugin, which though is not mature enough to find the angular 
                     definitions in node_modules/. We therefore copy the .d.ts files to help the eclipse plugin to resolve
                     any imports in our .ts files. Unfortunately, this has to be in the same source folder that contains
                    our .ts files, since the plugin does not even take all source folders of a project into account :( 
                    It does not hurt though having the .d.ts files in our source folder - no output will be generated for
                    them by the typescript compiler, so we're fine. 
                -->
                <execution>
                <id>provide-angular-dts-for-eclipse</id>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <resources>
                    <resource>
                      <directory>node_modules/angular2</directory>
                      <includes>
                        <include>**/*.d.ts</include>
                      </includes>
                       <excludes>
                        <exclude>bundles/**</exclude>
                        <exclude>ts/**</exclude>
                      </excludes>
                    </resource>
                  </resources>
                  <outputDirectory>src/main/web/angular2</outputDirectory>
                </configuration>
              </execution>
              <execution>
                <id>provide-rxjs-dts-for-eclipse</id>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <resources>
                    <resource>
                      <directory>node_modules/rxjs</directory>
                      <includes>
                        <include>**/*.d.ts</include>
                      </includes>
                    </resource>
                  </resources>
                  <outputDirectory>src/main/web/rxjs</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!-- Add folders containing JS resources as "test-resource". In Eclipse the folders are marked correctly, it 
               does not matter if they are "source" folders or "test" folders. But we want eclipse to know them, so the
               palanatir typescript plugin picks up the .ts files and we can compile them using that and get nice error
               markers etc. -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>add-eclipse-test-resources</id>
                <goals>
                  <goal>add-test-resource</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>src/main/web</directory>
                    </resource>
                    <resource>
                      <directory>${project.build.directory}/typescript-dev/main/web</directory>
                    </resource>
                    <resource>
                      <directory>${project.build.directory}/dependencies-source</directory>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!-- be sure to copy the generates .js files from typescript compiler (run in compile phase, see grunt task of 
               frontend plugin). -->
          <plugin>
            <groupId>org.diqube.build.maven</groupId>
            <artifactId>diqube-build-refresh-files-maven-plugin</artifactId>
            <version>${project.version}</version>
            <executions>
              <execution>
                <id>refresh-typescript-generated-files</id>
                <goals>
                  <goal>refresh</goal>
                </goals>
                <phase>process-classes</phase>
                <configuration>
                  <includes>
                    <include>**/*</include>
                  </includes>
                  <basedir>${project.build.directory}/typescript-dev/main/web</basedir>
                  <copyToOutputs>
                    <!-- Following two directories seem to be monitored by m2e-wtp. -->
                    <copyToOutput>${project.build.directory}/test-classes</copyToOutput>
                    <copyToOutput>${project.build.directory}/m2e-wtp/web-resources/WEB-INF/classes</copyToOutput>
                  </copyToOutputs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    
    <profile>
      <!-- A profile to disable nodeJs plugins to decrease build time in a typical UI-build cycle. -->
      <id>disableNode</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>install-node-and-npm</id>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
              <execution>
                <id>npm install</id>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
              <execution>
                <id>bower-install</id>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
              <execution>
                <id>grunt</id>
                <goals>
                  <goal>grunt</goal>
                </goals>
                <!-- run in compile, after diqube-java-dts-maven-plugin since this one compiles TypeScript and relies on the
                     output of diqube-java-dts-maven-plugin. -->
                <phase>compile</phase>
                <configuration>
                  <srcdir>${basedir}</srcdir>
                  <outputdir>${project.build.directory}</outputdir>
                </configuration>
              </execution>
              <execution>
                <id>javascript-tests</id>
                <goals>
                  <goal>karma</goal>
                </goals>
                <!-- run karma in integration test phase, because we want to use the JS files that are actually packaged in 
                     the .war -> Let the war be built in package phase first and then use that data to feed into karma! -->
                <phase>integration-test</phase>
                <configuration>
                  <karmaConfPath>${karma.final.config.dir}/karma.phantomjs.conf.js</karmaConfPath>
                  <skip>true</skip> <!-- TODO #97 -->
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
