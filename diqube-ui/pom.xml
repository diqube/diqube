<!--

    diqube: Distributed Query Base.

    Copyright (C) 2015 Bastian Gloeckle

    This file is part of diqube.

    diqube is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                        http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.diqube</groupId>
    <artifactId>diqube</artifactId>
    <version>1-SNAPSHOT</version>
  </parent>
  <artifactId>diqube-ui</artifactId>
  <packaging>war</packaging>
  <name>diqube - UI</name>
  <url>http://www.diqube.org</url>
  
  <properties>
    <!-- This needs to be matching the values in karma.default.conf.js! -->
    <war.webapp.directory>${project.build.directory}/war</war.webapp.directory>
    <karma.final.config.dir>${project.build.directory}/karma-config</karma.final.config.dir>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>update-license-headers</id>
            <configuration>
              <skip>true</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <webappDirectory>${war.webapp.directory}</webappDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <!-- Prepare karma config: We need to filter the karma config files from src/test/karma-config to contain 
                 the correct information before we can execute karma: 
                 
                 Not only do we need to give the config the correct directory locations, but also 
                 we need to give it a list of .js files that the tests need to load. These need to be in the right 
                 ordering to actually work. In order to test the index.html at the same time, we read the list of js
                 files to load from the index.html by extracting the name of the JS files from the <script src=..> tags!
                 -->
            <id>prepare-karma-config</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <!-- Load list of JS files loaded in index.html -->
                <loadfile property="jsFiles" srcFile="src/main/js/index.html">
                  <filterchain>
                    <linecontains>
                      <!-- select lines which contain script references -->
                      <contains value="script src=" />
                    </linecontains>
                    <tokenfilter>
                      <replaceregex pattern=".*script src=&quot;([^&quot;]+)&quot;.*" replace="webappBasePath + '\1'," />
                    </tokenfilter>
                  </filterchain>
                </loadfile>
                
                <echo message="Found following .js files to be included in index.html, will load them in the karma tests, too." />
                <echo message="${jsFiles}" />
              
                <!-- Copy the config files, replacing the placeholders. -->
                <!-- be sure we re-create those files each time, as JS files might have changed. -->
                <delete dir="${karma.final.config.dir}" /> 
                <mkdir dir="${karma.final.config.dir}" />
                <copy todir="${karma.final.config.dir}">
                  <fileset dir="src/test/karma-config/">
                    <include name="**/*" />
                  </fileset>
                  <filterset begintoken="{{" endtoken="}}">
                    <filter token="warBasePath" value="'${war.webapp.directory}'" />
                    <filter token="karmaBasePath" value="'${basedir}'"/>
                    <filter token="originalJsFiles" value="${jsFiles}" />
                  </filterset>
                </copy>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>install-node-and-npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <configuration>
              <nodeVersion>v0.12.7</nodeVersion>
              <npmVersion>2.13.4</npmVersion>
            </configuration>
          </execution>
          <execution>
            <id>npm install</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>bower-install</id>
            <goals>
              <goal>bower</goal>
            </goals>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>javascript-tests</id>
            <goals>
              <goal>karma</goal>
            </goals>
            <!-- run karma in integration test phase, because we want to use the JS files that are actually packaged in 
                 the .war -> Let the war be built in package phase first and then use that data to feed into karma! -->
            <phase>integration-test</phase>
            <configuration>
              <karmaConfPath>${karma.final.config.dir}/karma.phantomjs.conf.js</karmaConfPath>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-resources</id>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>src/main/js</directory>
                  <targetPath>web/</targetPath>
                </resource>
                <resource>
                  <directory>bower_components</directory>
                  <targetPath>web/bower_components</targetPath>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-resources</id>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>src/test/js</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-remote-query</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-context</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-buildinfo</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-diql</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-ticket</artifactId>
      <version>${project.version}</version>
    </dependency>
    
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-test-util</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>diqube-plan</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    
    <dependency>
      <groupId>net.bytebuddy</groupId>
      <artifactId>byte-buddy-dep</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.el</groupId>
      <artifactId>javax.el-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.web</groupId>
      <artifactId>javax.el</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
    </dependency>


    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.websocket</groupId>
      <artifactId>javax.websocket-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>javascript-tests-chrome</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <executions>
              <execution>
                  <id>javascript-tests</id>
                  <goals>
                    <goal>karma</goal>
                  </goals>
                  <configuration>
                    <karmaConfPath>${karma.final.config.dir}/karma.chrome.conf.js</karmaConfPath>
                  </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>minjs</id>
      <!-- This profile prepares a directory that contains all minified JS/CSS and makes war-plugin include those files 
           instead of the defaults. Additionally this will lead to only include those JS/CSS files of the dependencies 
           which are actually needed (e.g. the JQuery that is part of html5-boilerplate will not be included in the 
           resulting .war when using this profile. -->
       <activation>
        <activeByDefault>true</activeByDefault>
       </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>single</goal>
                </goals>
                <phase>generate-resources</phase>
                <id>prepare-minified-files</id>
                <configuration>
                  <descriptors>
                    <descriptor>src/main/assembly/minjs-assembly.xml</descriptor>
                  </descriptors>
                  <finalName>minjs_source</finalName>
                  <attach>false</attach>
                  <appendAssemblyId>false</appendAssemblyId>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <!--  overwrite execution of adding resources above: include minjs_source instead of bower_components/ -->
                <id>add-resources</id>
                <configuration>
                  <resources>
                    <resource>
                      <directory>src/main/js</directory>
                      <targetPath>web/</targetPath>
                    </resource>
                    <resource>
                      <directory>${project.build.directory}/minjs_source</directory>
                      <targetPath>web/</targetPath>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
